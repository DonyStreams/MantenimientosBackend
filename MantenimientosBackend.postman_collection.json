{
  "info": {
    "_postman_id": "mantenimientos-backend-collection",
    "name": "MantenimientosBackend API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// üîß GESTI√ìN MANUAL DE TOKENS",
          "// Los tokens se manejan completamente de forma manual:",
          "// 1. Ejecuta 'Obtener Token JWT' para autenticarte",
          "// 2. El token se guarda autom√°ticamente en la variable jwt_token",
          "// 3. Todas las peticiones usan ese token hasta que expire o hagas logout",
          "",
          "const currentToken = pm.collectionVariables.get('jwt_token');",
          "if (currentToken && currentToken !== '') {",
          "    console.log('üîë Usando token manual:', currentToken.substring(0, 20) + '...');",
          "} else {",
          "    console.log('‚ö†Ô∏è No hay token configurado - ejecuta \"Obtener Token JWT\" primero');",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8081/MantenimientosBackend/api",
      "type": "string"
    },
    {
      "key": "keycloak_url",
      "value": "http://172.16.1.192:8080/auth/realms/MantenimientosINACIF",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Autenticaci√≥n JWT",
      "item": [
        {
          "name": "üîë Obtener Token JWT (Manual)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access_token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('access_token');",
                  "    ",
                  "    // üîë GUARDAR TOKEN EN VARIABLE DE COLECCI√ìN",
                  "    pm.collectionVariables.set('jwt_token', responseJson.access_token);",
                  "    ",
                  "    // Guardar refresh token si est√° disponible",
                  "    if (responseJson.refresh_token) {",
                  "        pm.collectionVariables.set('refresh_token', responseJson.refresh_token);",
                  "        console.log('‚úÖ Refresh token tambi√©n almacenado');",
                  "    }",
                  "    ",
                  "    console.log('‚úÖ TOKEN ALMACENADO EXITOSAMENTE');",
                  "    console.log('üéØ Token:', responseJson.access_token.substring(0, 30) + '...');",
                  "    console.log('‚è∞ Expira en:', responseJson.expires_in, 'segundos');",
                  "    console.log('üöÄ Ahora puedes usar cualquier endpoint de la API');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "inacif-frontend",
                  "type": "text"
                },
                {
                  "key": "username",
                  "value": "admin",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "admin123",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{keycloak_url}}/protocol/openid-connect/token",
              "host": ["{{keycloak_url}}"],
              "path": ["protocol", "openid-connect", "token"]
            },
            "description": "üîë AUTENTICACI√ìN MANUAL\n\n1. Ejecuta esta petici√≥n para obtener tu token JWT\n2. El token se guarda autom√°ticamente en la variable 'jwt_token'\n3. Todas las dem√°s peticiones de la API usar√°n este token\n4. Si el token expira, vuelve a ejecutar esta petici√≥n\n5. Para cerrar sesi√≥n, usa 'üóëÔ∏è Cerrar Sesi√≥n (Logout)'\n\n‚öôÔ∏è Modifica username/password seg√∫n necesites."
          }
        },
        {
          "name": "üìä Estado del Token Actual",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const token = pm.collectionVariables.get('jwt_token');",
                  "const refresh = pm.collectionVariables.get('refresh_token');",
                  "",
                  "console.log('üîç VERIFICANDO ESTADO DEL TOKEN:');",
                  "if (token && token !== '') {",
                  "    console.log('‚úÖ Token JWT: CONFIGURADO (' + token.substring(0, 20) + '...)');",
                  "} else {",
                  "    console.log('‚ùå Token JWT: NO CONFIGURADO');",
                  "    console.log('üí° Ejecuta \"üîë Obtener Token JWT (Manual)\" primero');",
                  "}",
                  "",
                  "if (refresh && refresh !== '') {",
                  "    console.log('‚úÖ Refresh Token: DISPONIBLE');",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Refresh Token: NO DISPONIBLE');",
                  "}",
                  "",
                  "// Cancelar la petici√≥n - esto es solo para mostrar el estado",
                  "pm.execution.skipRequest();"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/health",
              "host": ["{{base_url}}"],
              "path": ["auth", "health"]
            },
            "description": "üîç VERIFICADOR DE ESTADO\n\nEsta petici√≥n NO se ejecuta, solo muestra en la consola:\n- Si tienes un token configurado\n- Si tienes refresh token\n- Primeros caracteres del token actual\n\n√ösala para verificar tu estado de autenticaci√≥n antes de hacer otras peticiones."
          }
        },
        {
          "name": "Validar Token - Info Usuario",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('username');",
                  "    pm.expect(responseJson).to.have.property('roles');",
                  "    pm.expect(responseJson.authenticated).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            }
          }
        },
        {
          "name": "Health Check Auth",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/health",
              "host": ["{{base_url}}"],
              "path": ["auth", "health"]
            }
          }
        },
        {
          "name": "Test Sin Token (401)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401 Unauthorized', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response contains JWT error message', function () {",
                  "    pm.expect(pm.response.text()).to.include('Token JWT requerido');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            }
          }
        },
        {
          "name": "üóëÔ∏è Cerrar Sesi√≥n (Logout)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// SIEMPRE limpiar tokens locales ANTES de intentar logout en Keycloak",
                  "const currentToken = pm.collectionVariables.get('jwt_token');",
                  "const refreshToken = pm.collectionVariables.get('refresh_token');",
                  "",
                  "console.log('üîê Iniciando cierre de sesi√≥n completo...');",
                  "",
                  "if (!currentToken) {",
                  "    console.log('‚ö†Ô∏è No hay token activo para cerrar sesi√≥n');",
                  "    console.log('üßπ Limpiando variables por si acaso...');",
                  "    ",
                  "    // Limpiar todo por si acaso",
                  "    pm.collectionVariables.set('jwt_token', '');",
                  "    pm.collectionVariables.set('refresh_token', '');",
                  "    if (pm.environment.has('jwt_token')) pm.environment.set('jwt_token', '');",
                  "    if (pm.environment.has('refresh_token')) pm.environment.set('refresh_token', '');",
                  "    ",
                  "    pm.execution.skipRequest();",
                  "    return;",
                  "}",
                  "",
                  "console.log('üéØ Token encontrado:', currentToken.substring(0, 20) + '...');",
                  "",
                  "// LIMPIAR TOKENS INMEDIATAMENTE para forzar el logout local",
                  "pm.collectionVariables.set('jwt_token', '');",
                  "pm.collectionVariables.set('refresh_token', '');",
                  "if (pm.environment.has('jwt_token')) pm.environment.set('jwt_token', '');",
                  "if (pm.environment.has('refresh_token')) pm.environment.set('refresh_token', '');",
                  "",
                  "console.log('‚úÖ Tokens locales eliminados inmediatamente');",
                  "",
                  "// Continuar con logout en Keycloak usando el refresh token si existe",
                  "if (refreshToken) {",
                  "    console.log('üîë Intentando logout en Keycloak con refresh token...');",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Sin refresh token - solo logout local aplicado');",
                  "    console.log('üí° El token expirar√° naturalmente en Keycloak');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Verificar que tokens est√©n eliminados (deber√≠a estar ya)",
                  "const token = pm.collectionVariables.get('jwt_token');",
                  "const refresh = pm.collectionVariables.get('refresh_token');",
                  "",
                  "// Evaluar resultado del logout en Keycloak",
                  "if (pm.response.code === 204 || pm.response.code === 200) {",
                  "    console.log('‚úÖ Logout exitoso en Keycloak tambi√©n');",
                  "    pm.test('‚úÖ Logout completo exitoso', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "    });",
                  "} else if (pm.response.code === 400) {",
                  "    const responseText = pm.response.text();",
                  "    if (responseText.includes('invalid_grant') || responseText.includes('Invalid refresh token')) {",
                  "        console.log('‚ö†Ô∏è Refresh token ya inv√°lido (normal si el token principal expir√≥)');",
                  "        pm.test('‚ö†Ô∏è Token ya expirado en Keycloak', function () {",
                  "            pm.expect(pm.response.code).to.equal(400);",
                  "        });",
                  "    } else {",
                  "        console.log('‚ö†Ô∏è Error 400 en Keycloak:', responseText);",
                  "    }",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Error en logout de Keycloak (c√≥digo:', pm.response.code, ')');",
                  "    console.log('üìù Respuesta:', pm.response.text());",
                  "}",
                  "",
                  "// Verificar limpieza local (lo m√°s importante)",
                  "pm.test('‚úÖ Tokens locales eliminados (cr√≠tico)', function () {",
                  "    pm.expect(token).to.equal('');",
                  "    pm.expect(refresh).to.equal('');",
                  "});",
                  "",
                  "console.log('üîê LOGOUT COMPLETADO');",
                  "console.log('üßπ Tokens locales eliminados');",
                  "console.log('üõ°Ô∏è Pr√≥ximas peticiones mostrar√°n 401 No Autorizado');",
                  "console.log('üí° Para acceder nuevamente, obt√©n un nuevo token');",
                  "console.log('');",
                  "console.log('üîç PRUEBA: Ejecuta ahora \"Validar Token - Info Usuario\" ');",
                  "console.log('   Deber√≠a mostrar error 401 confirmando el logout');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "inacif-frontend",
                  "type": "text"
                },
                {
                  "key": "refresh_token",
                  "value": "{{refresh_token}}",
                  "type": "text",
                  "description": "Se usa si est√° disponible para logout completo en Keycloak"
                }
              ]
            },
            "url": {
              "raw": "{{keycloak_url}}/protocol/openid-connect/logout",
              "host": ["{{keycloak_url}}"],
              "path": ["protocol", "openid-connect", "logout"]
            },
            "description": "Cierra sesi√≥n COMPLETAMENTE: elimina tokens locales inmediatamente y luego intenta logout en Keycloak. Garantiza que las pr√≥ximas peticiones sean rechazadas con 401."
          }
        }
      ]
    },
    {
      "name": "üìÅ √Åreas",
      "item": [
        {
          "name": "Listar √°reas",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/areas",
              "host": ["{{base_url}}"],
              "path": ["areas"]
            }
          }
        },
        {
          "name": "Crear √°rea",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"codigoArea\": \"LAB02\",\n  \"nombre\": \"Qu√≠mica Forense\",\n  \"tipoArea\": \"T√©cnico Cient√≠fico\",\n  \"estado\": true\n}" },
            "url": {
              "raw": "{{base_url}}/areas",
              "host": ["{{base_url}}"],
              "path": ["areas"]
            }
          }
        },
        {
          "name": "Actualizar √°rea",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"codigoArea\": \"LAB02\",\n  \"nombre\": \"Qu√≠mica Forense Modificada\",\n  \"tipoArea\": \"T√©cnico Cient√≠fico\",\n  \"estado\": false\n}" },
            "url": {
              "raw": "{{base_url}}/areas/LAB02",
              "host": ["{{base_url}}"],
              "path": ["areas", "LAB02"]
            }
          }
        },
        {
          "name": "Eliminar √°rea",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/areas/LAB02",
              "host": ["{{base_url}}"],
              "path": ["areas", "LAB02"]
            }
          }
        }
      ]
    },
    {
      "name": "üîß Equipos",
      "item": [
        {
          "name": "Listar equipos",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/equipos",
              "host": ["{{base_url}}"],
              "path": ["equipos"]
            }
          }
        },
        {
          "name": "Crear equipo",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Microscopio Forense\",\n  \"codigoInacif\": \"INACIF-002\",\n  \"marca\": \"Nikon\",\n  \"modelo\": \"E200\",\n  \"numeroInventario\": \"INV-2025-002\",\n  \"numeroSerie\": \"SN987654321\",\n  \"ubicacion\": \"Laboratorio Central\",\n  \"magnitudMedicion\": \"Aumento √≥ptico\",\n  \"rangoCapacidad\": \"40x‚Äì1000x\",\n  \"manualFabricante\": \"MAN-002 Microscopio E200\",\n  \"fotografia\": \"ruta/imagen/microscopio2.jpg\",\n  \"softwareFirmware\": \"FW v2.1.0\",\n  \"condicionesOperacion\": \"Temperatura 20-25¬∞C, Humedad <60%\",\n  \"descripcion\": \"Microscopio para an√°lisis de muestras biol√≥gicas en criminal√≠stica\",\n  \"estado\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/equipos",
              "host": ["{{base_url}}"],
              "path": ["equipos"]
            }
          }
        },
        {
          "name": "Actualizar equipo",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"numeroInventario\": \"EQ-0002\",\n  \"numeroSerie\": \"SN-54321\",\n  \"descripcion\": \"Centr√≠fuga Modificada\",\n  \"estado\": false\n}" },
            "url": {
              "raw": "{{base_url}}/equipos/EQ-0002",
              "host": ["{{base_url}}"],
              "path": ["equipos", "EQ-0002"]
            }
          }
        },
        {
          "name": "Eliminar equipo",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/equipos/EQ-0002",
              "host": ["{{base_url}}"],
              "path": ["equipos", "EQ-0002"]
            }
          }
        }
      ]
    },
    {
      "name": "üè¢ Proveedores",
      "item": [
        {
          "name": "Listar proveedores",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/proveedores",
              "host": ["{{base_url}}"],
              "path": ["proveedores"]
            }
          }
        },
        {
          "name": "Crear proveedor",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"nit\": \"9876543-2\",\n  \"nombre\": \"Proveedor B\",\n  \"estado\": true\n}" },
            "url": {
              "raw": "{{base_url}}/proveedores",
              "host": ["{{base_url}}"],
              "path": ["proveedores"]
            }
          }
        },
        {
          "name": "Actualizar proveedor",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"nit\": \"9876543-2\",\n  \"nombre\": \"Proveedor B Modificado\",\n  \"estado\": false\n}" },
            "url": {
              "raw": "{{base_url}}/proveedores/9876543-2",
              "host": ["{{base_url}}"],
              "path": ["proveedores", "9876543-2"]
            }
          }
        },
        {
          "name": "Eliminar proveedor",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/proveedores/9876543-2",
              "host": ["{{base_url}}"],
              "path": ["proveedores", "9876543-2"]
            }
          }
        }
      ]
    },
    {
      "name": "üìã Historial Equipo",
      "item": [
        {
          "name": "Listar historial equipo",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/historial-equipo",
              "host": ["{{base_url}}"],
              "path": ["historial-equipo"]
            }
          }
        },
        {
          "name": "Crear historial equipo",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"numeroInventario\": \"EQ-0002\",\n  \"descripcion\": \"Mantenimiento preventivo\",\n  \"fecha\": \"2024-06-25\"\n}" },
            "url": {
              "raw": "{{base_url}}/historial-equipo",
              "host": ["{{base_url}}"],
              "path": ["historial-equipo"]
            }
          }
        },
        {
          "name": "Actualizar historial equipo",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"numeroInventario\": \"EQ-0002\",\n  \"descripcion\": \"Mantenimiento correctivo\",\n  \"fecha\": \"2024-06-26\"\n}" },
            "url": {
              "raw": "{{base_url}}/historial-equipo/1",
              "host": ["{{base_url}}"],
              "path": ["historial-equipo", "1"]
            }
          }
        },
        {
          "name": "Eliminar historial equipo",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/historial-equipo/1",
              "host": ["{{base_url}}"],
              "path": ["historial-equipo", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üîß Tipos Mantenimiento",
      "item": [
        {
          "name": "Listar tipos mantenimiento",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tipos-mantenimiento",
              "host": ["{{base_url}}"],
              "path": ["tipos-mantenimiento"]
            }
          }
        },
        {
          "name": "Crear tipo mantenimiento",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"nombre\": \"Preventivo\",\n  \"descripcion\": \"Mantenimiento preventivo\",\n  \"estado\": true\n}" },
            "url": {
              "raw": "{{base_url}}/tipos-mantenimiento",
              "host": ["{{base_url}}"],
              "path": ["tipos-mantenimiento"]
            }
          }
        },
        {
          "name": "Actualizar tipo mantenimiento",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"nombre\": \"Correctivo\",\n  \"descripcion\": \"Mantenimiento correctivo\",\n  \"estado\": false\n}" },
            "url": {
              "raw": "{{base_url}}/tipos-mantenimiento/1",
              "host": ["{{base_url}}"],
              "path": ["tipos-mantenimiento", "1"]
            }
          }
        },
        {
          "name": "Eliminar tipo mantenimiento",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tipos-mantenimiento/1",
              "host": ["{{base_url}}"],
              "path": ["tipos-mantenimiento", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üìÑ Contratos",
      "item": [
        {
          "name": "Listar contratos",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/contratos",
              "host": ["{{base_url}}"],
              "path": ["contratos"]
            }
          }
        },
        {
          "name": "Crear contrato",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"descripcion\": \"Contrato de mantenimiento anual\",\n  \"fechaInicio\": \"2024-01-01\",\n  \"fechaFin\": \"2024-12-31\",\n  \"estado\": true\n}" },
            "url": {
              "raw": "{{base_url}}/contratos",
              "host": ["{{base_url}}"],
              "path": ["contratos"]
            }
          }
        },
        {
          "name": "Actualizar contrato",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"descripcion\": \"Contrato modificado\",\n  \"fechaInicio\": \"2024-01-01\",\n  \"fechaFin\": \"2024-12-31\",\n  \"estado\": false\n}" },
            "url": {
              "raw": "{{base_url}}/contratos/1",
              "host": ["{{base_url}}"],
              "path": ["contratos", "1"]
            }
          }
        },
        {
          "name": "Eliminar contrato",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/contratos/1",
              "host": ["{{base_url}}"],
              "path": ["contratos", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "‚öôÔ∏è Ejecuciones Mantenimiento",
      "item": [
        {
          "name": "Listar ejecuciones mantenimiento",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ejecuciones-mantenimiento",
              "host": ["{{base_url}}"],
              "path": ["ejecuciones-mantenimiento"]
            }
          }
        },
        {
          "name": "Crear ejecuci√≥n mantenimiento",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"contratoId\": 1,\n  \"fechaEjecucion\": \"2024-06-25\",\n  \"observaciones\": \"Ejecuci√≥n satisfactoria\"\n}" },
            "url": {
              "raw": "{{base_url}}/ejecuciones-mantenimiento",
              "host": ["{{base_url}}"],
              "path": ["ejecuciones-mantenimiento"]
            }
          }
        },
        {
          "name": "Actualizar ejecuci√≥n mantenimiento",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"contratoId\": 1,\n  \"fechaEjecucion\": \"2024-06-26\",\n  \"observaciones\": \"Observaci√≥n modificada\"\n}" },
            "url": {
              "raw": "{{base_url}}/ejecuciones-mantenimiento/1",
              "host": ["{{base_url}}"],
              "path": ["ejecuciones-mantenimiento", "1"]
            }
          }
        },
        {
          "name": "Eliminar ejecuci√≥n mantenimiento",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ejecuciones-mantenimiento/1",
              "host": ["{{base_url}}"],
              "path": ["ejecuciones-mantenimiento", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üé´ Tickets",
      "item": [
        {
          "name": "Listar tickets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tickets",
              "host": ["{{base_url}}"],
              "path": ["tickets"]
            }
          }
        },
        {
          "name": "Crear ticket",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"descripcion\": \"Prueba de ticket\",\n  \"prioridad\": \"Media\",\n  \"estado\": \"Abierto\"\n}" },
            "url": {
              "raw": "{{base_url}}/tickets",
              "host": ["{{base_url}}"],
              "path": ["tickets"]
            }
          }
        },
        {
          "name": "Actualizar ticket",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"descripcion\": \"Ticket modificado\",\n  \"prioridad\": \"Alta\",\n  \"estado\": \"Cerrado\"\n}" },
            "url": {
              "raw": "{{base_url}}/tickets/1",
              "host": ["{{base_url}}"],
              "path": ["tickets", "1"]
            }
          }
        },
        {
          "name": "Eliminar ticket",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tickets/1",
              "host": ["{{base_url}}"],
              "path": ["tickets", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üìÅ FTP & Archivos",
      "item": [
        {
          "name": "Subir archivo via FTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has file URL', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('url');",
                  "    console.log('Archivo subido en:', responseJson.url);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "C:/Users/USER/Downloads/screenshot.png",
                  "description": "Archivo a subir al servidor FTP"
                },
                {
                  "key": "descripcion",
                  "value": "Archivo de prueba subido via Postman",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/ftp/upload",
              "host": ["{{base_url}}"],
              "path": ["ftp", "upload"]
            }
          }
        },
        {
          "name": "Listar archivos FTP",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ftp/files",
              "host": ["{{base_url}}"],
              "path": ["ftp", "files"]
            }
          }
        },
        {
          "name": "Descargar archivo FTP",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ftp/download/{{filename}}",
              "host": ["{{base_url}}"],
              "path": ["ftp", "download", "{{filename}}"]
            }
          }
        },
        {
          "name": "Eliminar archivo FTP",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ftp/delete/{{filename}}",
              "host": ["{{base_url}}"],
              "path": ["ftp", "delete", "{{filename}}"]
            }
          }
        },
        {
          "name": "Estado servidor FTP",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ftp/status",
              "host": ["{{base_url}}"],
              "path": ["ftp", "status"]
            }
          }
        }
      ]
    },
    {
      "name": "üè∑Ô∏è Tipos Comentario",
      "item": [
        {
          "name": "Listar tipos comentario",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tipos-comentario",
              "host": ["{{base_url}}"],
              "path": ["tipos-comentario"]
            }
          }
        },
        {
          "name": "Crear tipo comentario",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"nombre\": \"Observaci√≥n\",\n  \"estado\": true\n}" },
            "url": {
              "raw": "{{base_url}}/tipos-comentario",
              "host": ["{{base_url}}"],
              "path": ["tipos-comentario"]
            }
          }
        },
        {
          "name": "Actualizar tipo comentario",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"nombre\": \"Observaci√≥n Modificada\",\n  \"estado\": false\n}" },
            "url": {
              "raw": "{{base_url}}/tipos-comentario/1",
              "host": ["{{base_url}}"],
              "path": ["tipos-comentario", "1"]
            }
          }
        },
        {
          "name": "Eliminar tipo comentario",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tipos-comentario/1",
              "host": ["{{base_url}}"],
              "path": ["tipos-comentario", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üí¨ Comentarios Ticket",
      "item": [
        {
          "name": "Listar comentarios ticket",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/comentarios-ticket",
              "host": ["{{base_url}}"],
              "path": ["comentarios-ticket"]
            }
          }
        },
        {
          "name": "Crear comentario ticket",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"ticketId\": 1,\n  \"tipoComentarioId\": 1,\n  \"comentario\": \"Comentario de prueba\",\n  \"fecha\": \"2024-06-25\"\n}" },
            "url": {
              "raw": "{{base_url}}/comentarios-ticket",
              "host": ["{{base_url}}"],
              "path": ["comentarios-ticket"]
            }
          }
        },
        {
          "name": "Actualizar comentario ticket",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"ticketId\": 1,\n  \"tipoComentarioId\": 1,\n  \"comentario\": \"Comentario modificado\",\n  \"fecha\": \"2024-06-26\"\n}" },
            "url": {
              "raw": "{{base_url}}/comentarios-ticket/1",
              "host": ["{{base_url}}"],
              "path": ["comentarios-ticket", "1"]
            }
          }
        },
        {
          "name": "Eliminar comentario ticket",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/comentarios-ticket/1",
              "host": ["{{base_url}}"],
              "path": ["comentarios-ticket", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üìé Evidencias",
      "item": [
        {
          "name": "Listar evidencias",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/evidencias",
              "host": ["{{base_url}}"],
              "path": ["evidencias"]
            }
          }
        },
        {
          "name": "Subir evidencia (multipart)",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "",
                  "description": "Archivo de evidencia"
                },
                {
                  "key": "ticketId",
                  "value": "1",
                  "type": "text"
                },
                {
                  "key": "descripcion",
                  "value": "Evidencia del problema",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/evidencias/upload",
              "host": ["{{base_url}}"],
              "path": ["evidencias", "upload"]
            }
          }
        },
        {
          "name": "Crear evidencia (JSON)",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"ticketId\": 1,\n  \"urlArchivo\": \"http://ejemplo.com/archivo.pdf\",\n  \"descripcion\": \"Evidencia de prueba\"\n}" },
            "url": {
              "raw": "{{base_url}}/evidencias",
              "host": ["{{base_url}}"],
              "path": ["evidencias"]
            }
          }
        },
        {
          "name": "Actualizar evidencia",
          "request": {
            "method": "PUT",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": { "mode": "raw", "raw": "{\n  \"id\": 1,\n  \"ticketId\": 1,\n  \"urlArchivo\": \"http://ejemplo.com/archivo2.pdf\",\n  \"descripcion\": \"Evidencia modificada\"\n}" },
            "url": {
              "raw": "{{base_url}}/evidencias/1",
              "host": ["{{base_url}}"],
              "path": ["evidencias", "1"]
            }
          }
        },
        {
          "name": "Eliminar evidencia",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/evidencias/1",
              "host": ["{{base_url}}"],
              "path": ["evidencias", "1"]
            }
          }
        }
      ]
    }
  ]
}
